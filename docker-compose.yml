version: "3.7"

services:
  rocketchat:
    image: rocket.chat:4.8.4
    labels:
      - docker-volume-backup.stop-during-backup=rocketchat
    container_name: rocketchat-app
    depends_on:
      - mongodb
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes:
      - ./data/rocketchat-media-data:/app/uploads
    networks:
      - rocketchat
    environment:
      PORT: ${PORT:-3000}
      ROOT_URL: "https://${ROCKETCHAT_HOST}"
      MONGO_URL: "${MONGO_URL:-mongodb://mongodb:27017/rocketchat?replicaSet=rs0}"
      MONGO_OPLOG_URL: "${MONGO_OPLOG_URL:-mongodb://mongodb:27017/local?replicaSet=rs0}"

  mongodb:
    image: bitnami/mongodb:4.4.15
    labels:
      - docker-volume-backup.stop-during-backup=mongodb
      - docker-volume-backup.archive-pre=/bin/sh -c 'mongodump --archive="/tmp/dumps/rocketchat-db_backup_$$(date '+%Y%m%d_%H%M%S')" --gzip --db=rocketchat --quiet'
    container_name: rocketchat-db
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes:
      - ./data/rocketchat-db-data:/bitnami/mongodb
      - ./data/rocketchat-db-data:/tmp/dumps
    networks:
      - rocketchat
    environment:
      MONGODB_REPLICA_SET_MODE: ${MONGODB_REPLICA_SET_MODE:-primary}
      MONGODB_REPLICA_SET_NAME: ${MONGODB_REPLICA_SET_NAME:-rs0}
      MONGODB_PORT_NUMBER: ${MONGODB_PORT_NUMBER:-27017}
      MONGODB_INITIAL_PRIMARY_HOST: ${MONGODB_INITIAL_PRIMARY_HOST:-mongodb}
      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: ${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-7017}
      MONGODB_ADVERTISED_HOSTNAME: ${MONGODB_ADVERTISED_HOSTNAME:-mongodb}
      MONGODB_ENABLE_JOURNAL: ${MONGODB_ENABLE_JOURNAL:-true}
      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD:-yes}

  rocketchat-gateway:
    image: nginx:1.19-alpine
    container_name: rocketchat-gateway
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes:
      - ./rocketchat-gateway/rocketchat.conf:/etc/nginx/conf.d/default.conf
    networks:
      - rocketchat
      - backend
    depends_on:
      - rocketchat
    environment:
      VIRTUAL_HOST: "${VIRTUAL_HOST}"
      LETSENCRYPT_HOST: "${LETSENCRYPT_HOST}"
      LETSENCRYPT_EMAIL: "${LETSENCRYPT_EMAIL}"

  backup_mongodb: &docker_volume_backup_service
    image: offen/docker-volume-backup:v2.21.0
    restart: always
    labels:
      - docker-volume-backup.archive-pre=/bin/sh -c 'wget ${HEALTHCHECKS_PING_URL} -O /dev/null'
    environment: &docker_volume_backup_environment
      BACKUP_CRON_EXPRESSION: ${BACKUP_CRON_EXPRESSION}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS}
      EXEC_FORWARD_OUTPUT: "true"
      NOTIFICATION_LEVEL: ${NOTIFICATION_LEVEL}
      NOTIFICATION_URLS: ${NOTIFICATION_URLS}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_ENDPOINT: ${AWS_ENDPOINT}
      AWS_S3_PATH: ${AWS_S3_PATH}
      LOCAL_BACKUP_LOCATION: ${LOCAL_BACKUP_LOCATION}
      HEALTHCHECKS_PING_URL: ${HEALTHCHECKS_PING_URL}
      BACKUP_STOP_CONTAINER_LABEL: mongodb
      BACKUP_FILENAME: rocketchat-db-backup-%Y-%m-%dT%H-%M-%S.tar.gz
      BACKUP_LATEST_SYMLINK: rocketchat-db-backup-latest.tar.gz
      BACKUP_PRUNING_PREFIX: rocketchat-db-backup-
    volumes:
      - ./data/rocketchat-db-data:/backup/rocketchat-db-backup:ro
      # Mounting the Docker socket allows the script to stop and restart
      # the container during backup. You can omit this if you don't want
      # to stop the container. In case you need to proxy the socket, you can
      # also provide a location by setting `DOCKER_HOST` in the container
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # If you mount a local directory or volume to `/archive` a local
      # copy of the backup will be stored there. You can override the
      # location inside of the container by setting `BACKUP_ARCHIVE`.
      # You can omit this if you do not want to keep local backups.
      - ${HOME}/${LOCAL_BACKUP_LOCATION}:/archive
      #  In case you want to run your cron rules in your local timezone
      # (respecting DST and similar), you can mount your Docker host's
      # /etc/timezone and /etc/localtime in read-only mode:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  backup_rocketchat_data:
    <<: *docker_volume_backup_service
    environment:
      <<: *docker_volume_backup_environment
      BACKUP_STOP_CONTAINER_LABEL: rocketchat
      BACKUP_FILENAME: rocketchat-backend-backup-%Y-%m-%dT%H-%M-%S.tar.gz
      BACKUP_LATEST_SYMLINK: rocketchat-backend-backup-latest.tar.gz
      BACKUP_PRUNING_PREFIX: rocketchat-backend-backup-
    volumes:
      - ./data/rocketchat-media-data:/backup/rocketchat-media-backup:ro
      # Mounting the Docker socket allows the script to stop and restart
      # the container during backup. You can omit this if you don't want
      # to stop the container. In case you need to proxy the socket, you can
      # also provide a location by setting `DOCKER_HOST` in the container
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # If you mount a local directory or volume to `/archive` a local
      # copy of the backup will be stored there. You can override the
      # location inside of the container by setting `BACKUP_ARCHIVE`.
      # You can omit this if you do not want to keep local backups.
      - ${HOME}/${LOCAL_BACKUP_LOCATION}:/archive
      #  In case you want to run your cron rules in your local timezone
      # (respecting DST and similar), you can mount your Docker host's
      # /etc/timezone and /etc/localtime in read-only mode:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

# volumes:
#   rocketchat-db-data:
#   rocketchat-media-data:

networks:
  rocketchat:
  backend:
    external: true
    name: nginx-proxy_and_companion_backend
